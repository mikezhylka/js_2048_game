{"version":3,"sources":["modules/Game.class.js","scripts/main.js"],"names":["Game","board","score","ROWS_NODE","document","querySelectorAll","LOSE_MESSAGE_NODE","querySelector","WIN_MESSAGE_NODE","SCORE_NODE","gameActive","remove","x","y","addEventListener","e","touches","clientX","clientY","xDiff","yDiff","Math","abs","horizontalMove","verticalMove","hasAnythingChanged","direction","newBoard","changedBoard","forEach","row","newRow","filter","cell","reverse","i","length","scoreChangeColor","push","arraysEqual","updateBoard","getScore","placeRandomTile","checkGameOver","checkWin","resultBoard","col","merge","unshift","key","rowIndex","cells","cellIndex","boardValue","textContent","className","board1","board2","innerHTML","clickStartButton","moveCells","emptyCells","randomCell","floor","random","randomValue","RandomTilePosition","changingCell","children","classList","add","toString","style","setTimeout","changeStartNodes","changeRestartNodes","childNodes","result","undefined","find","START_BUTTON_NODE","START_MESSAGE_NODE","replace","toggle","RESTART_BUTTON_NODE","RESTART_MESSAGE_NODE","resetBoard","resetScore","module","exports","require","game","start"],"mappings":";AAAA,aA2ZA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,MAAA,EAAA,OAAA,WAAA,MAAA,EAAA,cAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,YAAA,CAAA,UAAA,IAAA,EAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,UAAA,MAAA,UAAA,EAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,GAAA,UAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,EAAA,OAAA,aAAA,QAAA,IAAA,EAAA,CAAA,IAAA,EAAA,EAAA,KAAA,EAAA,GAAA,WAAA,GAAA,UAAA,EAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,gDAAA,OAAA,WAAA,EAAA,OAAA,QAAA,GA1ZMA,IAAAA,EA0ZN,WAAA,OAAA,EAzZgB,SAAA,IAAA,EAAA,KAAA,GACPC,KAAAA,MAAQ,CACX,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGPC,KAAAA,MAAQ,EAERC,KAAAA,UAAgBC,EAAAA,SAASC,iBAAiB,eAC1CC,KAAAA,kBAAoBF,SAASG,cAAc,iBAC3CC,KAAAA,iBAAmBJ,SAASG,cAAc,gBAC1CE,KAAAA,WAAaL,SAASG,cAAc,eAEpCG,KAAAA,YAAa,EACbC,KAAAA,QAAS,GAyYlB,CAAA,CAAA,IAAA,YAtYE,MAAA,WAAY,IAAA,EAAA,KACNC,EAAI,KACJC,EAAI,KAERT,SAASU,iBAAiB,aAAc,SAACC,GACvCH,EAAIG,EAAEC,QAAQ,GAAGC,QACjBJ,EAAIE,EAAEC,QAAQ,GAAGE,UAGnBd,SAASU,iBAAiB,YAAa,SAACC,GAClC,GAACH,GAAMC,EAAP,CAIEI,IAAAA,EAAUF,EAAEC,QAAQ,GAAGC,QACvBC,EAAUH,EAAEC,QAAQ,GAAGE,QAEvBC,EAAQF,EAAUL,EAClBQ,EAAQF,EAAUL,EAEpBQ,KAAKC,IAAIH,GAASE,KAAKC,IAAIF,GAE3BG,EADEJ,EAAQ,EACK,OAEA,SAIfK,EADEJ,EAAQ,EACG,KAEA,QAIjBR,EAAI,KACJC,EAAI,QAIAY,IAWAF,EAAiB,SAACG,GAChBC,IAZoBC,EAYpBD,EAAW,GAEjB,EAAK1B,MAAM4B,QAAQ,SAACC,GACdC,IAAAA,EAASD,EAAIE,OAAO,SAACC,GAASA,OAAS,IAATA,IAEhB,UAAdP,IACFK,EAASA,EAAOG,WAGb,IAAA,IAAIC,EAAI,EAAGA,EAAIJ,EAAOK,OAAS,EAAGD,IACjCJ,EAAOI,KAAOJ,EAAOI,EAAI,KAC3BJ,EAAOI,IAAM,EACbJ,EAAOI,EAAI,GAAK,EAChB,EAAKjC,OAAS6B,EAAOI,GACrB,EAAKE,oBAMFN,IAFPA,EAASA,EAAOC,OAAO,SAACC,GAASA,OAAS,IAATA,IAE1BF,EAAOK,OAAS,GACrBL,EAAOO,KAAK,GAGI,UAAdZ,IACFK,EAASA,EAAOG,WAGlBP,EAASW,KAAKP,KAxCUH,EA2CPD,EA1Cd,EAAKY,YAAY,EAAKtC,MAAO2B,KAChC,EAAK3B,MAAQ2B,EACb,EAAKY,cACL,EAAKC,WACL,EAAKC,kBACL,EAAKC,gBACL,EAAKC,aAuCHpB,EAAe,SAACE,GAIf,IAHCC,IAAAA,EAAW,CAAC,GAAI,GAAI,GAAI,IACxBkB,EAAc,CAAC,GAAI,GAAI,GAAI,IAExBZ,EAAO,EAAGA,EAAO,EAAKhC,MAAMmC,OAAQH,IACtC,IAAA,IAAIa,EAAM,EAAGA,EAAM,EAAK7C,MAAMmC,OAAQU,IACX,IAA1B,EAAK7C,MAAM6C,GAAKb,IAClBN,EAASM,GAAMK,KAAK,EAAKrC,MAAM6C,GAAKb,IAKrC,IAAA,IAAIa,EAAM,EAAGA,EAAMnB,EAASS,OAAQU,IACnCpB,GAAc,OAAdA,EAAoB,CACjB,IAAA,IAAIO,EAAO,EAAGA,EAAON,EAASmB,GAAKV,OAAQH,IAC1CN,EAASmB,GAAKb,KAAUN,EAASmB,GAAKb,EAAO,KAC/CN,EAASmB,GAAKb,IAAS,EACvBN,EAASmB,GAAKb,EAAO,GAAK,EAC1B,EAAK/B,OAASyB,EAASmB,GAAKb,GAC5B,EAAKI,oBAMFV,IAFPA,EAASmB,GAAOnB,EAASmB,GAAKd,OAAO,SAACC,GAASA,OAAS,IAATA,IAExCN,EAASmB,GAAKV,OAAS,GAC5BT,EAASmB,GAAKR,KAAK,QAEhB,GAAkB,SAAdZ,EAAsB,CAG1B,IAFDqB,IAAAA,GAAQ,EAEHd,EAAON,EAASmB,GAAKV,OAAS,EAAGH,GAAQ,EAAGA,IAC/CN,EAASmB,GAAKb,KAAUN,EAASmB,GAAKb,EAAO,IAAMc,IACrDpB,EAASmB,GAAKb,IAAS,EACvBN,EAASmB,GAAKb,EAAO,GAAK,EAC1B,EAAK/B,OAASyB,EAASmB,GAAKb,GAC5B,EAAKI,mBACLU,GAAQ,GAMLpB,IAFPA,EAASmB,GAAOnB,EAASmB,GAAKd,OAAO,SAACC,GAASA,OAAS,IAATA,IAExCN,EAASmB,GAAKV,OAAS,GAC5BT,EAASmB,GAAKE,QAAQ,GAKvB,IAAA,IAAIF,EAAM,EAAGA,EAAMnB,EAASS,OAAQU,IAClC,IAAA,IAAIb,EAAO,EAAGA,EAAON,EAASS,OAAQH,IACzCY,EAAYZ,GAAMa,GAAOnB,EAASmB,GAAKb,GAItC,EAAKM,YAAY,EAAKtC,MAAO4C,KAChC,EAAK5C,MAAQ4C,EACb,EAAKL,cACL,EAAKC,WACL,EAAKC,kBACL,EAAKC,gBACL,EAAKC,aAITxC,SAASU,iBAAiB,UAAW,SAACC,GAChC,GAAC,EAAKL,WAIFK,OAAAA,EAAEkC,KACH,IAAA,UACHzB,EAAa,MACb,MAEG,IAAA,YACHA,EAAa,QACb,MAEG,IAAA,YACHD,EAAe,QACf,MAEG,IAAA,aACHA,EAAe,cA6NzB,CAAA,IAAA,cAvNE,MAAA,WAAc,IAAA,EAAA,KACPpB,KAAAA,UAAU0B,QAAQ,SAACC,EAAKoB,GACTpB,EAAAA,EAAIqB,OAEhBtB,QAAQ,SAACI,EAAMmB,GACbC,IAAAA,EAAa,EAAKpD,MAAMiD,GAAUE,GAEpCnB,EAAKqB,cAAgBD,IACJ,IAAfA,GACFpB,EAAKsB,UAAL,aACAtB,EAAKqB,YAAc,KAEnBrB,EAAKqB,YAAcD,EACnBpB,EAAKsB,UAAsCF,0BAAAA,OAAAA,WA0MvD,CAAA,IAAA,cAnME,MAAA,SAAYG,EAAQC,GACb,IAAA,IAAI3B,EAAM,EAAGA,EAAM0B,EAAOpB,OAAQN,IAChC,IAAA,IAAIG,EAAO,EAAGA,EAAOuB,EAAOpB,OAAQH,IACnCuB,GAAAA,EAAO1B,GAAKG,KAAUwB,EAAO3B,GAAKG,GAC7B,OAAA,EAKN,OAAA,IA0LX,CAAA,IAAA,WAvLE,MAAA,WACOxB,KAAAA,WAAWiD,UAAe,GAAA,OAAA,KAAKxD,SAsLxC,CAAA,IAAA,QAnLE,MAAA,WACOyD,KAAAA,mBACAC,KAAAA,cAiLT,CAAA,IAAA,kBA9KE,MAAA,WAGO,IAFCC,IAAAA,EAAa,GAEV/B,EAAM,EAAGA,EAAM,EAAGA,IACpB,IAAA,IAAIG,EAAO,EAAGA,EAAO,EAAGA,IACG,IAA1B,KAAKhC,MAAM6B,GAAKG,IAClB4B,EAAWvB,KAAK,CAAER,IAAAA,EAAKG,KAAAA,IAKzB4B,GAAAA,EAAWzB,OAAS,EAAG,CACnB0B,IAAAA,EAAazC,KAAK0C,MAAM1C,KAAK2C,SAAWH,EAAWzB,QAEnD6B,EAAc5C,KAAK2C,UAAY,GAAM,EAAI,EACzCE,EAAqBL,EAAWC,GAC9BhC,EAAcoC,EAAdpC,IAAKG,EAASiC,EAATjC,KAERhC,KAAAA,MAAM6B,GAAKG,GAAQgC,EAElBE,IAAAA,EAAe,KAAKhE,UAAU2B,GAAKsC,SAASnC,GAElDkC,EAAaE,UAAUC,IAAmBL,eAAAA,OAAAA,IAC1CE,EAAaT,UAAYO,EAAYM,WAErCJ,EAAaK,MAAQ,iBAErBC,WAAW,WACTN,EAAaK,MAAQ,IACpB,QAiJT,CAAA,IAAA,mBA7IE,MAAA,WAAmB,IAAA,EAAA,KACSpE,SAASG,cAAc,WAe/BO,iBAAiB,QAdH,WAC1B,IAAC,EAAKH,OAOR,OANA,EAAK+D,mBACL,EAAKhC,kBACL,EAAKA,uBAEL,EAAK/B,QAAS,GAKhB,EAAKgE,yBAgIX,CAAA,IAAA,aA1HE,MAAA,WACO1E,KAAAA,MAAQ,CACX,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,IAGPE,KAAAA,UAAU0B,QAAQ,SAACC,GACtBA,EAAI8C,WAAW/C,QAAQ,SAACI,GACtBA,EAAKyB,UAAY,GACjBzB,EAAKsB,UAAY,mBA+GzB,CAAA,IAAA,aA1GE,MAAA,WACOrD,KAAAA,MAAQ,EACRO,KAAAA,WAAWiD,UAAY,MAwGhC,CAAA,IAAA,gBArGE,MAAA,WAAgB,IAERmB,EAAAA,GAAS,EAFD,KAIP5E,MAAM4B,QAAQ,SAACC,QACqBgD,IAAnChD,EAAIiD,KAAK,SAAC9C,GAASA,OAAS,IAATA,MACrB4C,GAAS,KAINA,IAIFnE,KAAAA,YAAa,EAEbP,KAAAA,UAAU0B,QAAQ,SAACC,GACJA,EAAAA,EAAIqB,OAEhBtB,QAAQ,SAACI,GACbA,EAAKuC,MAAQ,iBAEbC,WAAW,WACTxC,EAAKuC,MAAQ,IACZ,SAIFlE,KAAAA,kBAAkB+D,UAAU1D,OAAO,aAyE9C,CAAA,IAAA,WArEE,MAAA,WAAW,IAEHkE,EAAAA,GAAS,EAFN,KAIF5E,MAAM4B,QAAQ,SAACC,QACwBgD,IAAtChD,EAAIiD,KAAK,SAAC9C,GAASA,OAAS,OAATA,MACrB4C,GAAS,KAINA,IAIFnE,KAAAA,YAAa,EACbF,KAAAA,iBAAiB6D,UAAU1D,OAAO,aAsD7C,CAAA,IAAA,mBAlDE,MAAA,WAAmB,IAAA,EAAA,KACZF,KAAAA,WAAW+D,MAAQ,iBAExBC,WAAW,WACT,EAAKhE,WAAW+D,MAAQ,IACvB,OA6CP,CAAA,IAAA,mBA1CE,MAAA,WACQQ,IAAAA,EAAoB5E,SAASG,cAAc,iBAC3C0E,EAAqB7E,SAASG,cAAc,0BAElD0E,EAAmBvB,UAAY,sBAE/BuB,EAAmBZ,UAAUa,QAAQ,gBAAiB,mBACtDF,EAAkBtB,UAAY,UAC9BsB,EAAkBX,UAAUa,QAAQ,QAAS,WACxC1E,KAAAA,iBAAiB6D,UAAUc,OAAO,UAAU,GAE5CzE,KAAAA,YAAa,IA+BtB,CAAA,IAAA,qBA5BE,MAAA,WACQ0E,IAAAA,EAAsBhF,SAASG,cAAc,mBAC7C8E,EAAuBjF,SAASG,cACpC,4BAG0B,OAAxB6E,IACG5E,KAAAA,iBAAiB6D,UAAUC,IAAI,UAC/B3D,KAAAA,QAAS,EACT2E,KAAAA,aACAC,KAAAA,aAELF,EAAqB3B,UACnB,+CACF0B,EAAoB1B,UAAY,QAChC0B,EAAoBf,UAAUa,QAAQ,UAAW,SAEjDG,EAAqBhB,UAAUa,QAC7B,kBACA,iBAEG5E,KAAAA,kBAAkB+D,UAAUc,OAAO,UAAU,IAG/CxE,KAAAA,QAAS,MAIlB,GAAA6E,OAAOC,QAAUzF;;AC3ZjB,aAEA,IAAMA,EAAO0F,QAAQ,yBACfC,EAAO,IAAI3F,EAEjB2F,EAAKC","file":"main.4a9b57a8.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\nclass Game {\n  constructor() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n\n    this.ROWS_NODE = [...document.querySelectorAll('.field-row')];\n    this.LOSE_MESSAGE_NODE = document.querySelector('.message-lose');\n    this.WIN_MESSAGE_NODE = document.querySelector('.message-win');\n    this.SCORE_NODE = document.querySelector('.game-score');\n\n    this.gameActive = true;\n    this.remove = false;\n  }\n\n  moveCells() {\n    let x = null;\n    let y = null;\n\n    document.addEventListener('touchstart', (e) => {\n      x = e.touches[0].clientX;\n      y = e.touches[0].clientY;\n    });\n\n    document.addEventListener('touchmove', (e) => {\n      if (!x || !y) {\n        return;\n      }\n\n      const clientX = e.touches[0].clientX;\n      const clientY = e.touches[0].clientY;\n\n      const xDiff = clientX - x;\n      const yDiff = clientY - y;\n\n      if (Math.abs(xDiff) > Math.abs(yDiff)) {\n        if (xDiff < 0) {\n          horizontalMove('left');\n        } else {\n          horizontalMove('right');\n        }\n      } else {\n        if (yDiff < 0) {\n          verticalMove('up');\n        } else {\n          verticalMove('down');\n        }\n      }\n\n      x = null; // reset\n      y = null; // reset\n    });\n\n    // move handler, checks whether anything has changed so we can make the move\n    const hasAnythingChanged = (changedBoard) => {\n      if (!this.arraysEqual(this.board, changedBoard)) {\n        this.board = changedBoard;\n        this.updateBoard();\n        this.getScore();\n        this.placeRandomTile();\n        this.checkGameOver();\n        this.checkWin();\n      }\n    };\n\n    const horizontalMove = (direction) => {\n      const newBoard = [];\n\n      this.board.forEach((row) => {\n        let newRow = row.filter((cell) => cell !== 0);\n\n        if (direction === 'right') {\n          newRow = newRow.reverse();\n        }\n\n        for (let i = 0; i < newRow.length - 1; i++) {\n          if (newRow[i] === newRow[i + 1]) {\n            newRow[i] *= 2;\n            newRow[i + 1] = 0;\n            this.score += newRow[i];\n            this.scoreChangeColor();\n          }\n        }\n\n        newRow = newRow.filter((cell) => cell !== 0);\n\n        while (newRow.length < 4) {\n          newRow.push(0);\n        }\n\n        if (direction === 'right') {\n          newRow = newRow.reverse();\n        }\n\n        newBoard.push(newRow);\n      });\n\n      hasAnythingChanged(newBoard);\n    };\n\n    const verticalMove = (direction) => {\n      const newBoard = [[], [], [], []];\n      const resultBoard = [[], [], [], []];\n\n      for (let cell = 0; cell < this.board.length; cell++) {\n        for (let col = 0; col < this.board.length; col++) {\n          if (this.board[col][cell] !== 0) {\n            newBoard[cell].push(this.board[col][cell]);\n          }\n        }\n      }\n\n      for (let col = 0; col < newBoard.length; col++) {\n        if (direction === 'up') {\n          for (let cell = 0; cell < newBoard[col].length; cell++) {\n            if (newBoard[col][cell] === newBoard[col][cell + 1]) {\n              newBoard[col][cell] *= 2;\n              newBoard[col][cell + 1] = 0;\n              this.score += newBoard[col][cell];\n              this.scoreChangeColor();\n            }\n          }\n\n          newBoard[col] = newBoard[col].filter((cell) => cell !== 0);\n\n          while (newBoard[col].length < 4) {\n            newBoard[col].push(0);\n          }\n        } else if (direction === 'down') {\n          let merge = true;\n\n          for (let cell = newBoard[col].length - 1; cell >= 0; cell--) {\n            if (newBoard[col][cell] === newBoard[col][cell - 1] && merge) {\n              newBoard[col][cell] *= 2;\n              newBoard[col][cell - 1] = 0;\n              this.score += newBoard[col][cell];\n              this.scoreChangeColor();\n              merge = false;\n            }\n          }\n\n          newBoard[col] = newBoard[col].filter((cell) => cell !== 0);\n\n          while (newBoard[col].length < 4) {\n            newBoard[col].unshift(0);\n          }\n        }\n      }\n\n      for (let col = 0; col < newBoard.length; col++) {\n        for (let cell = 0; cell < newBoard.length; cell++) {\n          resultBoard[cell][col] = newBoard[col][cell];\n        }\n      }\n\n      if (!this.arraysEqual(this.board, resultBoard)) {\n        this.board = resultBoard;\n        this.updateBoard();\n        this.getScore();\n        this.placeRandomTile();\n        this.checkGameOver();\n        this.checkWin();\n      }\n    };\n\n    document.addEventListener('keydown', (e) => {\n      if (!this.gameActive) {\n        return;\n      }\n\n      switch (e.key) {\n        case 'ArrowUp':\n          verticalMove('up');\n          break;\n\n        case 'ArrowDown':\n          verticalMove('down');\n          break;\n\n        case 'ArrowLeft':\n          horizontalMove('left');\n          break;\n\n        case 'ArrowRight':\n          horizontalMove('right');\n          break;\n      }\n    });\n  }\n\n  updateBoard() {\n    this.ROWS_NODE.forEach((row, rowIndex) => {\n      const cells = [...row.cells];\n\n      cells.forEach((cell, cellIndex) => {\n        const boardValue = this.board[rowIndex][cellIndex];\n\n        if (cell.textContent !== boardValue) {\n          if (boardValue === 0) {\n            cell.className = `field-cell`;\n            cell.textContent = '';\n          } else {\n            cell.textContent = boardValue;\n            cell.className = `field-cell field-cell--${boardValue}`;\n          }\n        }\n      });\n    });\n  }\n\n  arraysEqual(board1, board2) {\n    for (let row = 0; row < board1.length; row++) {\n      for (let cell = 0; cell < board1.length; cell++) {\n        if (board1[row][cell] !== board2[row][cell]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  getScore() {\n    this.SCORE_NODE.innerHTML = `${this.score}`;\n  }\n\n  start() {\n    this.clickStartButton();\n    this.moveCells();\n  }\n\n  placeRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let cell = 0; cell < 4; cell++) {\n        if (this.board[row][cell] === 0) {\n          emptyCells.push({ row, cell });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomCell = Math.floor(Math.random() * emptyCells.length);\n\n      const randomValue = Math.random() <= 0.1 ? 4 : 2;\n      const RandomTilePosition = emptyCells[randomCell];\n      const { row, cell } = RandomTilePosition;\n\n      this.board[row][cell] = randomValue;\n\n      const changingCell = this.ROWS_NODE[row].children[cell];\n\n      changingCell.classList.add(`field-cell--${randomValue}`);\n      changingCell.innerHTML = randomValue.toString();\n\n      changingCell.style = 'color: #FF7F50';\n\n      setTimeout(() => {\n        changingCell.style = '';\n      }, 400);\n    }\n  }\n\n  clickStartButton() {\n    const START_BUTTON_NODE = document.querySelector('.button');\n    const startButtonClickHandler = () => {\n      if (!this.remove) {\n        this.changeStartNodes();\n        this.placeRandomTile();\n        this.placeRandomTile();\n\n        this.remove = true;\n\n        return;\n      }\n\n      this.changeRestartNodes();\n    };\n\n    START_BUTTON_NODE.addEventListener('click', startButtonClickHandler);\n  }\n\n  resetBoard() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.ROWS_NODE.forEach((row) => {\n      row.childNodes.forEach((cell) => {\n        cell.innerHTML = '';\n        cell.className = 'field-cell';\n      });\n    });\n  }\n\n  resetScore() {\n    this.score = 0;\n    this.SCORE_NODE.innerHTML = '0';\n  }\n\n  checkGameOver() {\n    const allCellsFilled = () => {\n      let result = true;\n\n      this.board.forEach((row) => {\n        if (row.find((cell) => cell === 0) !== undefined) {\n          result = false;\n        }\n      });\n\n      return result;\n    };\n\n    if (allCellsFilled()) {\n      this.gameActive = false;\n\n      this.ROWS_NODE.forEach((row) => {\n        const cells = [...row.cells];\n\n        cells.forEach((cell) => {\n          cell.style = 'color: #FF7F50';\n\n          setTimeout(() => {\n            cell.style = '';\n          }, 500);\n        });\n      });\n\n      this.LOSE_MESSAGE_NODE.classList.remove('hidden');\n    }\n  }\n\n  checkWin() {\n    const winCellExists = () => {\n      let result = false;\n\n      this.board.forEach((row) => {\n        if (row.find((cell) => cell === 2048) !== undefined) {\n          result = true;\n        }\n      });\n\n      return result;\n    };\n\n    if (winCellExists()) {\n      this.gameActive = false;\n      this.WIN_MESSAGE_NODE.classList.remove('hidden');\n    }\n  }\n\n  scoreChangeColor() {\n    this.SCORE_NODE.style = 'color: #FF7F50';\n\n    setTimeout(() => {\n      this.SCORE_NODE.style = '';\n    }, 400);\n  }\n\n  changeStartNodes() {\n    const START_BUTTON_NODE = document.querySelector('.button.start');\n    const START_MESSAGE_NODE = document.querySelector('.message.message-start');\n\n    START_MESSAGE_NODE.innerHTML = 'Your ad can be here';\n\n    START_MESSAGE_NODE.classList.replace('message-start', 'message-restart');\n    START_BUTTON_NODE.innerHTML = 'Restart';\n    START_BUTTON_NODE.classList.replace('start', 'restart');\n    this.WIN_MESSAGE_NODE.classList.toggle('hidden', true);\n\n    this.gameActive = true;\n  }\n\n  changeRestartNodes() {\n    const RESTART_BUTTON_NODE = document.querySelector('.button.restart');\n    const RESTART_MESSAGE_NODE = document.querySelector(\n      '.message.message-restart',\n    );\n\n    if (RESTART_BUTTON_NODE !== null) {\n      this.WIN_MESSAGE_NODE.classList.add('hidden');\n      this.remove = true;\n      this.resetBoard();\n      this.resetScore();\n\n      RESTART_MESSAGE_NODE.innerHTML =\n        'Press \"Start\" to begin game. <br> Good luck!';\n      RESTART_BUTTON_NODE.innerHTML = 'Start';\n      RESTART_BUTTON_NODE.classList.replace('restart', 'start');\n\n      RESTART_MESSAGE_NODE.classList.replace(\n        'message-restart',\n        'message-start',\n      );\n      this.LOSE_MESSAGE_NODE.classList.toggle('hidden', true);\n    }\n\n    this.remove = false;\n  }\n}\n\nmodule.exports = Game;\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ngame.start();\n"]}